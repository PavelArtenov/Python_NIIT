"""Задание
Давайте реализуем один из известных паттернов проектирования. Этим паттерном будет Компоновщик.
Он создан для структурирования объектов, компонуя объекты в древовидные структуры. HTML,
дерево файлов и папок в Linux - яркие примеры таких структур. Вы же создатите текстовое
отображение папок и вложенных файлов:
Создайте класс BaseNode, которые принимает в констукторе имя и сохраняет его у себя.
А также имеет метод __repr__, который ничего не делает.
Создайте класс File, который будет наследником  BaseNode. У него должен быть переопределен
метод __repr__, который должен возвращать строку 'file: "<имя файла>"'.
Создайте класс Dir,   который будет наследником BaseNode. У него должно быть хранилище
вложенных в него файлов и папок. Должен быть метод add, добавляющий файл или папку.
Должен быть метод remove, удаляющий вложенную в него ранее файл или папку.
И переопределен метод __repr__, который будет возвращать строку 'directory: <имя папки>
(<перечисление вложенных папок и файлов через запятую или слово empty, если папка пуста>).
В итоге у Вас должен написанный ниже код работать так, как в примере.
Внимательно изучите пример, он даст все подсказки (включая знание об аргуметнах,
которые должны принимать методы и т. д.). Посмотрите примеры реализации этого паттерна,
она достаточно проста на любом языке.
Продолжение на слайде ниже."""

class BaseNode:
    name = ""
    def __init__(self,name):
        self.name = name


    def __repr__(self):
        pass


class File(BaseNode):
    def __repr__(self):
        return "file: \"{}\"".format(self.name)


class Dir(BaseNode):
    def __init__(self, name):
        super().__init__(name)
        self.store = []


    def add(self, file):
        self.store.append(file)


    def remove(self, node):
        self.store.remove(node)


    def __repr__(self):
        subfolders = ""
        if len(self.store) == 0:
            return "directory: {} (empty)".format(self.name)
        else:
            for i in self.store:
                subfolders += str(i) + ", "
            return "directory: {} ({})".format(self.name, subfolders[:len(subfolders) - 2])



d1 = Dir("dir1")
d1.add(File("text1.txt"))
d1.add(File("text2.txt"))
d2 = Dir("dir2")
d1.add(d2)
d3 = Dir("dir3")
d2.add(d3)
d2.remove(d3)


print(d1)

